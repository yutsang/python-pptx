"""
Financial Data Processor - Main Application
Streamlit application for processing financial data and generating PowerPoint presentations.
"""

import warnings
import urllib3
import streamlit as st
import os

# Import modular components
from fdd_utils import (
    EntityProcessor, AIProcessor, ExportManager, DataProcessor,
    Sidebar, MainContent, FileUpload, AppState, AppConfig, ErrorHandler,
    AppConstants
)

# === STREAMLIT CONFIGURATION (MUST BE FIRST) ===
# Disable bytecode generation
os.environ['PYTHONDONTWRITEBYTECODE'] = '1'

# Configure page (MUST be first Streamlit command)
st.set_page_config(
    page_title=AppConstants.PAGE_TITLE,
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better appearance
st.markdown("""
<style>
.stApp {
    max-width: 1200px;
    margin: 0 auto;
}
.stButton button {
    width: 100%;
}
</style>
""", unsafe_allow_html=True)

# Suppress warnings
urllib3.disable_warnings()
warnings.filterwarnings('ignore', category=UserWarning, module='openpyxl')
warnings.simplefilter(action='ignore', category=UserWarning)
warnings.filterwarnings('ignore', message='Data Validation extension is not supported and will be removed', category=UserWarning, module='openpyxl')

"""
Main application logic with centralized session management.
"""

def main():
    """Main application entry point."""

    st.title("üìä Financial Data Processor")

    # Initialize session state
    AppState.initialize_session_state()

    # Load configuration
    config = AppConfig.load_main_config()
    if not config:
        st.error("‚ùå Configuration file not found. Please check fdd_utils/config.json")
        st.stop()

    # Initialize AI client
    try:
        ai_client, _ = AIProcessor.initialize_ai_services(config, use_local=False, use_openai=False)
        if not ai_client:
            st.warning("‚ö†Ô∏è AI client initialization failed. Using mock mode for testing.")
            ai_client, _ = AIProcessor.initialize_ai_services(config, use_local=False, use_openai=False, use_mock=True)
        except Exception as e:
        st.warning(f"‚ö†Ô∏è AI initialization error: {str(e)}")
        st.info("üîß Using mock AI mode for testing purposes.")
        ai_client, _ = AIProcessor.initialize_ai_services(config, use_local=False, use_openai=False, use_mock=True)

    # Sidebar controls
    with st.sidebar:
        try:
            uploaded_file, entity_input, entity_mode, statement_type, ai_mode = Sidebar.render_sidebar()

            # Validate entity input
            if entity_input:
                selected_entity, entity_keywords, entity_suffixes = EntityProcessor.generate_entity_keywords(entity_input)
                EntityProcessor.display_entity_info(selected_entity, entity_keywords)

                # Update session state
                AppState.update_entity_context(entity_input, entity_mode)
            else:
                st.error("‚ö†Ô∏è Please enter an entity name to start processing")
                st.stop()

        except Exception as e:
            ErrorHandler.handle_processing_error(e, "sidebar setup")
            st.stop()
        
    # Main content area
        if uploaded_file is not None:
        try:
            # Process and validate uploaded file
            uploaded_file = FileUpload.process_uploaded_file(uploaded_file)
            if not uploaded_file:
                st.stop()

            # Render main content based on statement type
            MainContent.render_main_content(
                        uploaded_file=uploaded_file,
                selected_entity=selected_entity,
                        entity_keywords=entity_keywords,
                        entity_suffixes=entity_suffixes,
                statement_type=statement_type,
                ai_client=ai_client,
                config_details=config
            )

                    except Exception as e:
            ErrorHandler.handle_processing_error(e, "file processing")


if __name__ == "__main__":
    main() 
