#!/usr/bin/env python3
"""
VERIFICATION SCRIPT: Test Chinese PPT Export Fixes
Run this script to verify that all Chinese export issues are fixed.
"""

import sys
import os
import tempfile

# Add the project root to Python path
sys.path.append('/Users/ytsang/Desktop/Github/python-pptx')

def test_chinese_export_fixes():
    """Test all Chinese export fixes in one comprehensive test"""

    print("üß™ CHINESE EXPORT FIXES VERIFICATION")
    print("=" * 60)

    from common.pptx_export import export_pptx
    from pptx import Presentation

    # Create test content with substantial Chinese text
    test_content = '''# Balance Sheet Analysis

## Current Assets
Êà™Ëá≥2022Âπ¥12Êúà31Êó•ÁöÑÊµÅÂä®ËµÑ‰∫ßÊÄªÈ¢ù‰∏∫‰∫∫Ê∞ëÂ∏Å150‰∏áÂÖÉÔºåÂÖ∂‰∏≠Ë¥ßÂ∏ÅËµÑÈáëÂç†ÊØîÁ∫¶‰∏∫33%ÔºåÂ∫îÊî∂Ë¥¶Ê¨æÂç†ÊØîÁ∫¶‰∏∫40%ÔºåÂ≠òË¥ßÂç†ÊØîÁ∫¶‰∏∫27%„ÄÇÊµÅÂä®ËµÑ‰∫ßÁöÑÊûÑÊàêËæÉ‰∏∫ÂêàÁêÜÔºå‰ΩìÁé∞‰∫ÜÂÖ¨Âè∏ËâØÂ•ΩÁöÑÊµÅÂä®ÊÄßÁÆ°ÁêÜËÉΩÂäõ„ÄÇÊµÅÂä®ËµÑ‰∫ßÂë®ËΩ¨Áéá‰øùÊåÅÂú®ËæÉÈ´òÊ∞¥Âπ≥ÔºåË°®ÊòéÂÖ¨Âè∏ÁöÑËê•ËøêËµÑÈáë‰ΩøÁî®ÊïàÁéáËâØÂ•Ω„ÄÇ

## Non-current Assets
ÈùûÊµÅÂä®ËµÑ‰∫ß‰∏ªË¶ÅÁî±Âõ∫ÂÆöËµÑ‰∫ßÂíåÈïøÊúüËÇ°ÊùÉÊäïËµÑÊûÑÊàê„ÄÇÂõ∫ÂÆöËµÑ‰∫ßÂéüÂÄº‰∏∫‰∫∫Ê∞ëÂ∏Å200‰∏áÂÖÉÔºåÁ¥ØËÆ°ÊäòÊóß‰∏∫30‰∏áÂÖÉÔºåÂõ∫ÂÆöËµÑ‰∫ßÂáÄÂÄº‰∏∫170‰∏áÂÖÉ„ÄÇÈïøÊúüËÇ°ÊùÉÊäïËµÑË¥¶Èù¢‰ª∑ÂÄº‰∏∫80‰∏áÂÖÉÔºå‰∏ªË¶ÅÊäïËµÑ‰∫éËÅîËê•‰ºÅ‰∏öÂíåÂêàËê•‰ºÅ‰∏ö„ÄÇÂõ∫ÂÆöËµÑ‰∫ßÁöÑ‰ΩøÁî®ÂØøÂëΩËæÉÈïøÔºå‰∏∫ÂÖ¨Âè∏ÁöÑÈïøÊúüÂèëÂ±ïÊèê‰æõ‰∫ÜÁâ©Ë¥®‰øùÈöú„ÄÇ

## Current Liabilities
ÊµÅÂä®Ë¥üÂÄ∫ÊÄªÈ¢ù‰∏∫‰∫∫Ê∞ëÂ∏Å80‰∏áÂÖÉÔºåÂÖ∂‰∏≠Â∫î‰ªòË¥¶Ê¨æ‰∏∫48‰∏áÂÖÉÔºåÂç†ÊµÅÂä®Ë¥üÂÄ∫ÊÄªÈ¢ùÁöÑ60%ÔºõÁü≠ÊúüÂÄüÊ¨æ‰∏∫20‰∏áÂÖÉÔºåÂç†ÊµÅÂä®Ë¥üÂÄ∫ÊÄªÈ¢ùÁöÑ25%ÔºõÂÖ∂‰ªñÊµÅÂä®Ë¥üÂÄ∫‰∏∫12‰∏áÂÖÉ„ÄÇÂÖ¨Âè∏ÊµÅÂä®Ë¥üÂÄ∫ÁªìÊûÑÁõ∏ÂØπÁ®≥ÂÆöÔºåÂÄ∫Âä°Ë¥üÊãÖÈÄÇ‰∏≠„ÄÇ

## Equity
ËÇ°‰∏úÊùÉÁõäÊÄªÈ¢ù‰∏∫‰∫∫Ê∞ëÂ∏Å250‰∏áÂÖÉÔºåÂÖ∂‰∏≠ÂÆûÊî∂ËµÑÊú¨‰∏∫150‰∏áÂÖÉÔºåËµÑÊú¨ÂÖ¨ÁßØ‰∏∫40‰∏áÂÖÉÔºåÊú™ÂàÜÈÖçÂà©Ê∂¶‰∏∫60‰∏áÂÖÉ„ÄÇÂÖ¨Âè∏ÁöÑÂáÄËµÑ‰∫ßÊî∂ÁõäÁéá‰øùÊåÅÂú®ËæÉ‰∏∫ÁêÜÊÉ≥ÁöÑÊ∞¥Âπ≥ÔºåÊòæÁ§∫‰∫ÜËâØÂ•ΩÁöÑÁõàÂà©ËÉΩÂäõÂíåËµÑÊú¨ÂõûÊä•„ÄÇËÇ°‰∏úÊùÉÁõäÁªìÊûÑÂêàÁêÜÔºåÊúâÂà©‰∫éÂÖ¨Âè∏ÁöÑÂèØÊåÅÁª≠ÂèëÂ±ï„ÄÇ

## Cash Flow Analysis
ÁªèËê•Ê¥ªÂä®Áé∞ÈáëÊµÅÈáèÂáÄÈ¢ù‰∏∫‰∫∫Ê∞ëÂ∏Å45‰∏áÂÖÉÔºåÊäïËµÑÊ¥ªÂä®Áé∞ÈáëÊµÅÈáèÂáÄÈ¢ù‰∏∫Ë¥ü30‰∏áÂÖÉÔºåËûçËµÑÊ¥ªÂä®Áé∞ÈáëÊµÅÈáèÂáÄÈ¢ù‰∏∫Ë¥ü15‰∏áÂÖÉ„ÄÇÊï¥‰ΩìÁé∞ÈáëÊµÅÈáèÁä∂ÂÜµÂü∫Êú¨Á®≥ÂÆöÔºå‰ΩÜÈúÄË¶ÅÂÖ≥Ê≥®ÊäïËµÑÊ¥ªÂä®ÁöÑÁé∞ÈáëÊµÅÂá∫ÊÉÖÂÜµ„ÄÇÁé∞ÈáëÊµÅÈáèÁöÑÂêàÁêÜÈÖçÁΩÆÊòØÂÖ¨Âè∏Ë¥¢Âä°ÂÅ•Â∫∑ÁöÑÈáçË¶ÅÊ†áÂøó„ÄÇ
'''

    # Create temporary files
    with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False, encoding='utf-8') as md_file:
        md_file.write(test_content)
        md_path = md_file.name

    with tempfile.NamedTemporaryFile(suffix='.pptx', delete=False) as pptx_file:
        pptx_path = pptx_file.name

    try:
        print("üìÑ Test content created (5 sections with substantial Chinese text)")
        print("üöÄ Exporting with language='chinese'...")

        # Export with Chinese mode
        result = export_pptx(
            template_path='fdd_utils/template.pptx',
            markdown_path=md_path,
            output_path=pptx_path,
            project_name='ChineseTest',
            language='chinese'  # This triggers all Chinese optimizations
        )

        if result and os.path.exists(result):
            print("‚úÖ Export successful!")

            # Analyze the generated PPTX
            prs = Presentation(result)
            print(f"üìä Generated {len(prs.slides)} slides")

            # Analyze content
            total_chinese_chars = 0
            chinese_headers_found = []
            english_headers_found = []

            for slide_idx, slide in enumerate(prs.slides):
                print(f"\nüìÑ SLIDE {slide_idx + 1}:")

                for shape in slide.shapes:
                    if hasattr(shape, 'text_frame') and shape.text_frame:
                        text = shape.text_frame.text.strip()
                        if text and len(text) > 5:
                            chinese_count = sum(1 for char in text if '\u4e00' <= char <= '\u9fff')
                            total_chinese_chars += chinese_count

                            if chinese_count > 0:
                                print(f"   ‚úÖ {chinese_count} Chinese characters")

                                # Check for specific header translations
                                if 'ÊµÅÂä®ËµÑ‰∫ß' in text:
                                    chinese_headers_found.append('ÊµÅÂä®ËµÑ‰∫ß')
                                    print("      üéØ Current Assets ‚Üí ÊµÅÂä®ËµÑ‰∫ß")
                                if 'ÈùûÊµÅÂä®ËµÑ‰∫ß' in text:
                                    chinese_headers_found.append('ÈùûÊµÅÂä®ËµÑ‰∫ß')
                                    print("      üéØ Non-current Assets ‚Üí ÈùûÊµÅÂä®ËµÑ‰∫ß")
                                if 'ËÇ°‰∏úÊùÉÁõä' in text:
                                    chinese_headers_found.append('ËÇ°‰∏úÊùÉÁõä')
                                    print("      üéØ Equity ‚Üí ËÇ°‰∏úÊùÉÁõä")

                            # Check for untranslated headers
                            if 'Current Assets' in text and 'ÊµÅÂä®ËµÑ‰∫ß' not in text:
                                english_headers_found.append('Current Assets')
                                print("      ‚ùå ENGLISH: Current Assets")
                            if 'Non-current Assets' in text and 'ÈùûÊµÅÂä®ËµÑ‰∫ß' not in text:
                                english_headers_found.append('Non-current Assets')
                                print("      ‚ùå ENGLISH: Non-current Assets")
                            if 'Equity' in text and 'ËÇ°‰∏úÊùÉÁõä' not in text:
                                english_headers_found.append('Equity')
                                print("      ‚ùå ENGLISH: Equity")

            # Final results
            print("\nüéØ VERIFICATION RESULTS:")
            print("=" * 50)

            success_count = 0

            # Check multi-page
            if len(prs.slides) > 1:
                print("‚úÖ MULTI-PAGE: Content spans multiple slides")
                success_count += 1
            else:
                print("‚ùå SINGLE PAGE: Content fits on one slide only")

            # Check header translation
            if chinese_headers_found:
                print(f"‚úÖ HEADER TRANSLATION: {len(chinese_headers_found)} Chinese headers found")
                print(f"   Headers: {', '.join(set(chinese_headers_found))}")
                success_count += 1
            else:
                print("‚ùå HEADER TRANSLATION: No Chinese headers found")

            if english_headers_found:
                print(f"‚ùå ENGLISH HEADERS: {english_headers_found} still in English")

            # Check Chinese content
            if total_chinese_chars > 200:
                print(f"‚úÖ CHINESE CONTENT: {total_chinese_chars} Chinese characters")
                success_count += 1
            else:
                print(f"‚ùå CHINESE CONTENT: Only {total_chinese_chars} Chinese characters")

            print("\n" + "=" * 50)
            if success_count >= 3:
                print("üéâ ALL FIXES ARE WORKING CORRECTLY!")
                print("   ‚úÖ Multi-page content distribution")
                print("   ‚úÖ Chinese header translation")
                print("   ‚úÖ Substantial Chinese content")
                return True
            else:
                print("‚ö†Ô∏è  SOME ISSUES MAY STILL EXIST")
                return False

        else:
            print("‚ùå Export failed")
            return False

    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False

    finally:
        # Cleanup
        for path in [md_path, pptx_path]:
            if os.path.exists(path):
                os.unlink(path)

def main():
    """Main function"""
    print("CHINESE PPT EXPORT FIXES VERIFICATION")
    print("This script tests all the fixes for Chinese PPT export issues.")
    print()

    success = test_chinese_export_fixes()

    print("\n" + "=" * 60)
    if success:
        print("üéâ SUCCESS: All Chinese export fixes are working!")
        print("\nWhat this means:")
        print("‚Ä¢ Headers like 'Current Assets' are translated to 'ÊµÅÂä®ËµÑ‰∫ß'")
        print("‚Ä¢ Content spans multiple pages when needed")
        print("‚Ä¢ Chinese text is properly formatted with correct spacing")
        print("‚Ä¢ All Chinese characters are preserved")
    else:
        print("‚ö†Ô∏è  ISSUES DETECTED: Some fixes may not be working")
        print("\nPlease check the error messages above.")

    print("\nTo run this test yourself:")
    print("cd /Users/ytsang/Desktop/Github/python-pptx")
    print("python verify_chinese_fixes.py")
    print("=" * 60)

if __name__ == "__main__":
    main()
